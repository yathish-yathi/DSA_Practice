https://leetcode.com/problems/combination-sum/description/
https://www.youtube.com/watch?v=SiOcVp_h7q8
https://www.youtube.com/watch?v=8GCanpcONgQ

T O(2^N), S O(N) (need to revisit both)

//In this problem answer array one element can repeat any no. of times so
// we keep on adding same ith element until bounday/base condition is hit 
//then we exclude that element and add next element in next recursion to find different combinatons
//whenever cursum==target add into ans array note : add as new array 
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        int cursum=0;
        recursion(candidates, target, cur, ans, 0, cursum);
        return ans;
    }

    public void recursion(int[] candidates, int target, List<Integer> cur, List<List<Integer>> ans, int i, int cursum){
        //boundary condition
        if(cursum>target || i==candidates.length){
            return;
        }

        //base condition
        if(cursum==target){
            ans.add(new ArrayList<Integer>(cur)); // Note : add as new array list as array list store address of cur and when cur is updated in next recursion the ans will also update so always add as new object
            return;
        }

        //Inclusion
        cursum+=candidates[i];
        cur.add(candidates[i]);
        recursion(candidates, target, cur, ans, i, cursum);

        //Exclusion
        cursum-=candidates[i];
        cur.remove(cur.size()-1);
        recursion(candidates, target, cur, ans, i+1, cursum);

    }
}

//=======
Combination Sum
Medium

Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
frequency
 of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []
 

Constraints:

1 <= candidates.length <= 30
2 <= candidates[i] <= 40
All elements of candidates are distinct.
1 <= target <= 40
