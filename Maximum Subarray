https://www.youtube.com/watch?v=u7YMFRUFqe0&t=402s
link : https://leetcode.com/problems/next-permutation/description/
Medium

1. using Kadane's Algorithm 
(note : Kadane's Algorithm works only when max sum of subarray is +ve)
 T O(n), S O(1)

class Solution {
    //Kadane's Algorithm => we calculate continuous sum and update maxsum but re-initialise sum to 0 when sum becomes -ve 
    public int maxSubArray(int[] nums) {
        int sum=0;
        int maxsum=0;
        int n=nums.length;
        for(int i=0; i<n; i++){
            sum+=nums[i];
            maxsum=Math.max(sum, maxsum);
            if(sum<0){
                sum=0;
            }
        }
        return maxsum;
    }
}

//============
2. Divid and conquer
T O(nlogn), S O(1)
Explanation : https://www.youtube.com/watch?v=p4n9vyhL6Zk
class Solution {
    public int maxSubArray(int[] nums) {
        return maxSum(nums, 0, nums.length-1);
    }

    public int maxSum(int[] arr, int l, int r){

        if(l>=r){
            return arr[l];
        }

        int mid=l+((r-l)/2);

        int lsum=maxSum(arr, l, mid);
        int rsum=maxSum(arr, mid+1, r);

        int leftRunningSum=0;
        int lmax=Integer.MIN_VALUE;
        for(int i=mid; i>=l; i--){
            leftRunningSum+=arr[i];
            lmax=Math.max(lmax, leftRunningSum);
        }

        int rightRunningSum=0;
        int rmax=Integer.MIN_VALUE;
        for(int i=mid+1; i<=r; i++){
            rightRunningSum+=arr[i];
            rmax=Math.max(rmax, rightRunningSum);
        }

        System.out.println(lmax+" "+rmax);
        int crossSum=lmax+rmax;

        System.out.println("l="+l+" r="+r+" lmax="+lmax+" rmax="+rmax+" crossSum="+crossSum);
        return Math.max(crossSum, Math.max(lsum,rsum));
    }
}

//====
3. Greedy 
T O(n), S O(1)
https://www.youtube.com/watch?v=u7YMFRUFqe0&t=402s

class Solution {
    public int maxSubArray(int[] nums) {
        int cursum=nums[0];
        int maxsum=cursum;
        int n=nums.length;
        for(int i=1; i<n; i++){
            cursum=Math.max(cursum+nums[i], nums[i]);
            maxsum=Math.max(maxsum, cursum);
        }
        return maxsum;
    }
}


//Problem//
Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
