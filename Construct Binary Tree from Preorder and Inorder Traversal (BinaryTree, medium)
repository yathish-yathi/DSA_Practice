https://www.youtube.com/watch?v=PbPS460rbMo&t=719s
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/

T O(n) , S O(n)

//Observations from inorder and pre-order array with respect to tree diagram
//i. inorder : all element present at left side of root are part of left subtree and all element present at right side of root are part of right subtree
//ii. pre-order : elements present from of array is the root

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer, Integer> map = new HashMap<>();

        for(int i=0; i<inorder.length; i++){
            map.put(inorder[i], i);
        }

        return buildTreeUtil(preorder, map, 0, 0, preorder.length-1);
    }

    public TreeNode buildTreeUtil(int[] preorder, Map<Integer, Integer> map, int preorder_root_index, int inorder_start_index, int inorder_end_index){

        //creating Node
        //System.out.println(preorder[preorder_root_index]);
        TreeNode root = new TreeNode(preorder[preorder_root_index]);

        //Geting index of root in inorder array from map using value of root
        int mid = map.get(preorder[preorder_root_index]);

        //checking if elements are present to left side of mid
        if(inorder_start_index < mid){
            root.left = buildTreeUtil(preorder, map, preorder_root_index+1, inorder_start_index, mid-1);
        }

        //checking if elements are present to right side of mid
        //here (mid - inorder_start_index) is count of elements at left of mid
        if(inorder_end_index > mid){
            root.right = buildTreeUtil(preorder, map, preorder_root_index + (mid - inorder_start_index) + 1, mid+1, inorder_end_index);
        }

        return root;
    }
}

//=======
Construct Binary Tree from Preorder and Inorder Traversal
Medium

Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]
 

Constraints:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder and inorder consist of unique values.
Each value of inorder also appears in preorder.
preorder is guaranteed to be the preorder traversal of the tree.
inorder is guaranteed to be the inorder traversal of the tree.
