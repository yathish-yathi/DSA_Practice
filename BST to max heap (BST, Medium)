https://www.geeksforgeeks.org/problems/bst-to-max-heap/1

T O(2n), S O(n)

//1. use inorder taversal to retrieve data in sorted order and save it in arraylist
//2. perform post order traversal and assign value at front of list to root.data
/*class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}*/

class Solution
{
    public static void convertToMaxHeapUtil(Node root)
    {
        //code here
        //1.
        List<Integer> values = new ArrayList<>();
        inorder_retrieve_values(root, values);
        //2.
        postorder_toMaxHeap(root, values);
    }
    
    public static void inorder_retrieve_values(Node root, List<Integer> values){
        if(root==null) return;
        
        inorder_retrieve_values(root.left, values);
        values.add(root.data);
        inorder_retrieve_values(root.right, values);
    }
    
    public static void postorder_toMaxHeap(Node root, List<Integer> values){
        if(root==null) return;
        
        postorder_toMaxHeap(root.left, values);
        postorder_toMaxHeap(root.right, values);
        root.data = values.remove(0);
    }
}



//=========
BST to max heap
Difficulty: Medium
Given a Binary Search Tree. Convert a given BST into a Special Max Heap with the condition that all the values in the left subtree of a node should be less than all the values in the right subtree of the node. This condition is applied on all the nodes in the so converted Max Heap.

Example 1:

Input :
                 4
               /   \
              2     6
            /  \   /  \
           1   3  5    7  

Output : 1 2 3 4 5 6 7 
Exaplanation :
               7
             /   \
            3     6
          /   \  /   \
         1    2 4     5
The given BST has been transformed into a
Max Heap and it's postorder traversal is
1 2 3 4 5 6 7.

Your task :
You don't need to read input or print anything. Your task is to complete the function convertToMaxHeapUtil() which takes the root of the tree as input and converts the BST to max heap.
Note : The driver code prints the postorder traversal of the converted BST.
 
Expected Time Complexity : O(n)
Expected Auxiliary Space : O(n)
 
Constraints :
1 ≤ n ≤ 105
