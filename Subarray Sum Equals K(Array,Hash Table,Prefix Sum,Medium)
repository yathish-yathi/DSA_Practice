T O(n) , S O(n)

//Prifix sum concept is used
//we continuosly traverse in array and perform below task
//1. check if sum==k then count++
//2. if sum-k value present in prefix map then a sub array can be formed and number 
// of sub array formed depends on how many times sum-k occured previously 
//3. at last updated current sum into prefix map

class Solution {
    public int subarraySum(int[] nums, int k) {
        int n=nums.length;
        int sum=0;
        int count=0;
        Map<Integer, Integer> map=new HashMap<>();

        for(int i=0; i<n; i++){
            sum=sum+nums[i];

            //1. check if sum==k then count++
            if(sum==k){
                count++;
            }

            //2. if sum-k value present in prefix map then a sub array can be formed and number 
            // of sub array formed depends on how many times sum-k occured previously 
            if(map.containsKey(sum-k)){
                count=count+map.get(sum-k);
            }

             //3. at last updated current sum into prefix map
            if(map.containsKey(sum)){
                map.put(sum,map.get(sum)+1);
            }else{
                map.put(sum,1);
            }
        }
        return count;
    }
}
//========


Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107
