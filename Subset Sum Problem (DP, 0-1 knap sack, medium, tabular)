https://www.geeksforgeeks.org/problems/subset-sum-problem-1611555638/1

T O(coins * Target), S O(coins * Target)
//Logic is same as 0 - 1 knap sack instead of int we use boolean, we can rewrite code to optimise space similar to 0 - 1 knap sack problem

//Tabulation approch 

class Solution {

    static Boolean isSubsetSum(int arr[], int target) {
        // code here
        int m = arr.length;
        int n = target;
        
        boolean dp[][] = new boolean[m+1][n+1]; // +1 because we have added extra val=0 and wt=0 
        
        for(int i=0; i<=m; i++){
            for(int t=0; t<=n; t++){
                //when we have no coins 
                //fill first col with true (when tagert is 0 we can alway have traget), and first row with false (when no coins available we can never reach traget except for target 0)
                if(i==0 || t==0){
                    if(i==0) {//to have true when both i and t are 0 we have written t==0 condition first and (t==0) condition next (second condition will overrrid false)
                        dp[i][t]=false;
                    }
                    if(t==0) {
                        dp[i][t]=true;
                    }
                }
                
                //Coin Can be included if cur target >= coin value
                else if( t >= arr[i-1]){
                    //included
                    boolean val1 = dp[i-1][t - arr[i-1]];
                    //Excluded
                    boolean val2 = dp[i-1][t];
                    
                    dp[i][t] = (val1 || val2);
                }
                //Coin can not be included (Excluded)
                else{
                    dp[i][t] = dp[i-1][t];
                }
                
                //if any of last columns (t==target) upfated with true that means
                //with so for checked coins we can have target sum and no need to 
                //check further
                if(t==target && dp[i][t]){
                    return true;
                }
            }
        }
        return dp[m][n];
    }
}

=========
recursive approach

class Solution {

    static Boolean isSubsetSum(int arr[], int target) {
        // code here
        int dp[][]  = new int[arr.length+1][target+1]; //[V][W]
        
        for(int[] ii : dp){
           for(int i=0; i<ii.length; i++){
               ii[i]=-1;
           }
        } 
        
        int n = arr.length;
        
        
        return isSubsetSumUtil(arr, target, n, dp) == 1 ? true : false;
    }
    
    static int isSubsetSumUtil(int arr[], int target, int n, int dp[][]) {
        // code here
        if(target == 0) return 1;
        if(n == 0) return 0; 
        
        if(dp[n][target] != -1) return dp[n][target];
        
        if(target >= arr[n-1]){
            //here -1 written in val[n-1] or wt[n-1] actully n itself but -1 because of ) indexing of val and wt arrays not to confuse it with n-1 in function which represents till previous elements
            int ans1 = isSubsetSumUtil(arr, target-arr[n-1], n-1, dp);
            
            int ans2 = isSubsetSumUtil(arr, target, n-1, dp);
            
            dp[n][target] = (ans1 ==1 || ans2 == 1) ? 1 : 0;

            return dp[n][target];
            
        }else{
            dp[n][target] = isSubsetSumUtil(arr, target, n-1, dp);

            return dp[n][target];
        }
    }
}

==========
Subset Sum Problem
Difficulty: Medium

Given an array of positive integers, arr[] and a value, target, determine if there is a subset of the given set with sum equal to given target. 

Examples:

Input: arr[] = [3, 34, 4, 12, 5, 2], target = 9
Output: true 
Explanation: Here there exists a subset with target sum = 9, 4+3+2 = 9.
Input: arr[] = [3, 34, 4, 12, 5, 2, target = 30
Output: false
Explanation: There is no subset with target sum 30.
Input: arr[] = [1, 2, 3], sum = 6
Output: true
Explanation: The entire array can be taken as a subset, giving 1 + 2 + 3 = 6.
Constraints:
1 <= arr.size() <= 200
1<= arr[i] <= 200
1<= sum <= 4*104
