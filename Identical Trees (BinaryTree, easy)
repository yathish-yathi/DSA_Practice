https://www.geeksforgeeks.org/problems/determine-if-two-trees-are-identical/1

T O(n), S O(height of tree)

/*

class Node{
    int data;
    Node left,right;
    Node(int d){
        data=d;
        left=right=null;
    }
}*/

//1. if both roots reached to null then leaves are identical so return true
//2. if one of the roots reaches null or data is different then not identical and return false 
class Solution
{
    //Function to check if two trees are identical.
	boolean isIdentical(Node root1, Node root2)
	{
	    // Code Here
	    return checkIdentity(root1, root2);
	}
	
	public boolean checkIdentity(Node root1, Node root2){
	    //1.
	    if(root1==null && root2==null){
	        return true;
	    }
	    //2.
	    if(root1==null || root2==null || root1.data!=root2.data){
	        return false;
	    }
	    
	    return checkIdentity(root1.left, root2.left) && checkIdentity(root1.right, root2.right);
	}
}

//==============
Identical Trees
Difficulty: Easy
Given two binary trees, the task is to find if both of them are identical or not.
Note: You need to return true or false, the printing is done by the driver code.

Example 1:

Input:
     1          1
   /   \      /   \
  2     3    2     3
Output: 
Yes
Explanation: 
There are two trees both having 3 nodes and 2 edges, both trees are identical having the root as 1, left child of 1 is 2 and right child of 1 is 3.
Example 2:

Input:
    1       1
  /  \     /  \
 2    3   3    2
Output: 
No
Explanation: There are two trees both having 3 nodes and 2 edges, but both trees are not identical.
Your task:
Since this is a functional problem you don't have to worry about input, you just have to complete the function isIdentical() that takes two roots as parameters and returns true or false. The printing is done by the driver code.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(Height of the Tree).

Constraints:
1 <= Number of nodes <= 105
1 <=Data of a node <= 109

