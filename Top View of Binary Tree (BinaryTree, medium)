https://www.geeksforgeeks.org/problems/top-view-of-binary-tree/1

T O(nlogn) adding and fecting data from tree map will take O(logN) , S O(n) n is the size of map in worst case where all horizontal distance is unique

//BFS is used to traverse nodes
//Do not use DFS because it will work for left side but may fail for right side because
//DFS will traverse inner nodes first and traverse right most node at last, so 
//inner node added to map first and right most node are not added due to condition
//!tMap.containsKey(cur_hd)
//Note : we have used TreeMap because it will store key-value in ascending order of Key by default, HashMap will not gaurenty any kind of order
//TreeMap internally uses BST(Binary Search Tree, for any node left side smaller and right side greater values structure) to store the KEY.

/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/

class Solution {
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
        
        static ArrayList<Integer> topView(Node root) {
        // add your code
        
        TreeMap<Integer, Integer> tMap = new TreeMap<>();
        ArrayList<Integer> ans = new ArrayList<Integer>();
        
        BFS(root, tMap, ans);
        
        for(int i : tMap.keySet()){
            ans.add(tMap.get(i));
        }
        
        return ans;
    }
    
    static class Pair{
        int hd;
        Node root;
        
        public Pair(int hd, Node root){
            this.hd=hd;
            this.root=root;
        }
    }
    
    static void BFS(Node root, TreeMap<Integer, Integer> tMap, ArrayList<Integer> ans){
        
        Queue<Pair> q = new LinkedList<>();
        
        q.add(new Pair(0, root));
        
        while(!q.isEmpty()){
            
            Pair cur = q.poll();
            int cur_hd = cur.hd;
            Node Cur_Root = cur.root;
            
            if(!tMap.containsKey(cur_hd)){
            tMap.put(cur_hd, Cur_Root.data);
            }
            
            if(Cur_Root.left!=null) q.add(new Pair(cur_hd-1, Cur_Root.left));
            if(Cur_Root.right!=null) q.add(new Pair(cur_hd+1, Cur_Root.right));
        }
    }
}

//=============
Top View of Binary Tree
Difficulty: Medium
Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node. Also if 2 nodes are outside the shadow of the tree and are at same position then consider the left ones only(i.e. leftmost). 
For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.

Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3
Example 2:

Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100
Your Task:
Since this is a function problem. You don't have to take input. Just complete the function topView() that takes root node as parameter and returns a list of nodes visible from the top view from left to right.

Expected Time Complexity: O(NlogN)
Expected Auxiliary Space: O(N).

Constraints:
1 ≤ N ≤ 105
1 ≤ Node Data ≤ 105
