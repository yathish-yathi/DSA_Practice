https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/
https://www.youtube.com/watch?v=w2G2W8l__pc


//note : code is same as "search in rotated and sorted" but problem is 
//we can not identify which side sorted when mid, low and high are having
//same elements, So in those cases we shrink at low and high (since mid is not equal to targed , low and high also wont be equal to targer)
//when array is rotated then at any point one side will be sorted and another side is not
//we will check if targer element is available at sorted side and discard other side, if not discard another side

class Solution {
    public boolean search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;

        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target) return true;

            if(nums[mid]==nums[low] && nums[mid]==nums[high]){
                low++;high--;
                continue;
            }

            //checking if right side is sorted or not 
            if(nums[low]<=nums[mid]){
                //checking if element exist in sorted side
                if(target>=nums[low] && target<=nums[mid]){
                    high=mid-1;
                }else{
                    //if element does not exist in sorted side then discard it
                    low=mid+1;
                }
            //if left is not sorted then right will be sorted  
            }else{
                //checking if element exist in sorted side
                if(target>=nums[mid] && target<=nums[high]){
                    low=mid+1;
                }else{
                    //if element does not exist in sorted side then discard it
                    high=mid-1;
                }
            }
        }
        return false;
    }
}

//=====
There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
nums is guaranteed to be rotated at some pivot.
-104 <= target <= 104
