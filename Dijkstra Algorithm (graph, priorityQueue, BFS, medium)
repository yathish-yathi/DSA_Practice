https://www.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1

T O((V+E)log V) , S O(n)

//0. create a distance array then update all index with +infinity except sorce which is 0 (distace between src to src is zero)
//1. create PriorityQueue such that it return node with shortest dist from source
//2. create a Pair class and implement comparable and override compareTo such that pq returns node with
//shortest distance first 
//2.1 start BFS 
//3. add src node and its distance from src (which will be 0)
//4. perform below operations until q.isEmpty
//poll() node 
// find u (index of cur)
//find v (index of child)
//find wt (weight of edge between cur and child)
//if distance of cur node + wt between destination is less than present distance of destination node then update the distance of destination node's index in dist array
//add child node into PQ with its distance
//5. when all pq becomes empty distance array will be updated will shortest value between src and itself
//6. in calling method first conver array to List<> then pass this list into arralist as collection then return arrayList

//NOTE : here in calling method we have not used for loop to traverse all disconnected nodes
//like we do in normal graph traversal, becaue  if nodes are disconnected then there would be no distance from src so it will be +infinity

/*
class iPair {
    int first, second;

    iPair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}
*/

// User function Template for Java
class Solution {
    // Function to find the shortest distance of all the vertices
    // from the source vertex src.
    ArrayList<Integer> dijkstra(ArrayList<ArrayList<iPair>> adj, int src) {
        // Write your code here
        Integer dis[] = new Integer[adj.size()];
        for(int i=0; i<dis.length; i++){
                dis[i]=Integer.MAX_VALUE;
        }
        dis[src]=0;
        
        boolean vis[] = new boolean[adj.size()];
        
        dijkstraUtil(adj, src, vis, dis);
        
        //We do not have direct way to convert array to arraylist so 
        //first convert array to list then pass list as collection into Arraylist constructor
        ArrayList<Integer> aList =  new ArrayList<>(Arrays.asList(dis));
        
        return aList;
    }
    
    public void dijkstraUtil(ArrayList<ArrayList<iPair>> adj, int src, boolean[] vis, Integer dis[]) {
        // Write your code here
        //1.
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        
        //3.
        pq.add(new Pair(src, dis[src]));
        
        while(!pq.isEmpty()){
            
            Pair cur = pq.poll();
            //we have this if condition because when there is a cycle in graph a single node could 
            //get added twice into pq and we dont want to re-process same node again
            if(!vis[cur.node]){
                vis[cur.node]=true;
                
                for(iPair p : adj.get(cur.node)){
                    int u = cur.node;
                    int v = p.first;
                    int wt = p.second;
                    
                    if(dis[u] + wt < dis[v]){
                        dis[v]=dis[u] + wt;
                    }
                    pq.add(new Pair(v, dis[v]));
                }
            }
        }
    }
}

class Pair implements Comparable<Pair>{
    Integer node;
    Integer dist;
    
    public Pair(Integer node, Integer dist){
        this.node=node;
        this.dist=dist;
    }
    
    public int compareTo(Pair pair){
        return this.dist-pair.dist;
    }
}

=================
Dijkstra Algorithm
Difficulty: Medium
Given a weighted, undirected and connected graph where you have given adjacency list adj. You have to find the shortest distance of all the vertices from the source vertex src, and return a list of integers denoting the shortest distance between each node and source vertex src.

Note: The Graph doesn't contain any negative weight edge.

Examples:

Input: adj = [[[1, 9]], [[0, 9]]], src = 0
Output: [0, 9]
Explanation:

The source vertex is 0. Hence, the shortest distance of node 0 is 0 and the shortest distance from node 0 to 1 is 9.
Input: adj = [[[1, 1], [2, 6]], [[2, 3], [0, 1]], [[1, 3], [0, 6]]], src = 2
Output: [4, 3, 0]
Explanation:

For nodes 2 to 0, we can follow the path 2-1-0. This has a distance of 1+3 = 4, whereas the path 2-0 has a distance of 6. So, the Shortest path from 2 to 0 is 4.
The shortest distance from 0 to 1 is 1 .
Constraints:
1 ≤ no. of vertices ≤ 1000
0 ≤ adj[i][j] ≤ 1000
0 ≤ src < no. of vertices
