https://www.geeksforgeeks.org/problems/check-whether-bst-contains-dead-end/1


//for child node at left, the max value allowed is value of parent node-1,
//for child node at right, the min strting value is value of parent node+1,
//when min and max becomes same at leaf node , we can not add any new node to that leaf node which makes it dead end
//1. if node is null return false
//2. a node is called leaf node if both left and right are null, when found check if min==max 
//if yes then return true else false

/*class Node {
        int data;
        Node left, right;
 
        Node(int item) {
            data = item;
            left = right = null;
        }
    }*/

//Function should return true if a deadEnd is found in the bst otherwise return false.
class Solution
{
    public static boolean isDeadEnd(Node root)
    {
        //Add your code here.
        return isDeadEnd_helper(root, 1, 10001);
    }
    
    public static boolean isDeadEnd_helper(Node root, int min, int max)
    {
        if(root == null) return false;

        //leaf node
        if(root.left==null && root.right==null){
            if(min==max) return true;
            else return false;
        }
        
        return isDeadEnd_helper(root.left, min, root.data-1) || isDeadEnd_helper(root.right, root.data+1, max);
    }
}

//============
Check whether BST contains Dead End
Difficulty: Medium
Given a Binary Search Tree that contains unique positive integer values greater than 0. The task is to complete the function isDeadEnd which returns true if the BST contains a dead end else returns false. Here Dead End means a leaf node, at which no other node can be inserted.

Example 1:

Input :   
               8
             /   \ 
           5      9
         /  \     
        2    7 
       /
      1     
          
Output : 
Yes
Explanation : 
Node 1 is a Dead End in the given BST.
Example 2:

Input :     
              8
            /   \ 
           7     10
         /      /   \
        2      9     13

Output : 
Yes
Explanation : 
Node 9 is a Dead End in the given BST.
Your Task: You don't have to input or print anything. Complete the function isDeadEnd() which takes BST as input and returns a boolean value.

Expected Time Complexity: O(N), where N is the number of nodes in the BST.
Expected Space Complexity: O(N)

Constraints:
1 <= N <= 1001
1 <= Value of Nodes <= 10001
