https://leetcode.com/problems/jump-game/description/
https://www.youtube.com/watch?v=tZAa_jJ3SwQ

T O(n), S O(1)

//We traverse each step and get maximum number of steps we can jump
//from cur index and keep track of max step
//Any anycur index(step) if we find that cur step is greater that what
//we could reach by previous allowed max steps then we return false
class Solution {
    public boolean canJump(int[] nums) {
        int max=0;
        for(int i=0; i<nums.length; i++){
            if(i>max) return false;

            int maxStep=i+nums[i];

            max=Math.max(maxStep, max);
        }
        return true;
    }
}


//========
Jump Game
Medium

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 105
