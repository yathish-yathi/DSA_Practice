https://leetcode.com/problems/longest-consecutive-sequence/description/
https://www.youtube.com/watch?v=LvbtUMdcgbw

Medium, T O(n) , S (n)

//To check if next element is present in array or not we need to traverse each time
//which will take O(n) every time , we can avoid this using HashMap, here due to implementation of hash table behind the scene time to check if key is present or not
//will take O(1)[HashMap.containsKey(key) T/F], we use array elements in KEY then we can check if KEY/Element present or not in just 0(1)
//1. create hashmap 
//2. add elements to map and mark as false(not visited)
//3. traverse array and pick nums one by one 
//4. check if consecutive higher nums are present as keys and Length++
//5.  check if consecutive lower nums are present as keys and Length++
//6. track MaxLength 
class Solution {
    public int longestConsecutive(int[] nums) {
        //1.
        HashMap<Integer, Boolean> hashmap=new HashMap<>();

        //2.
        for(int num : nums){
            hashmap.put(num, false); // we can also use Boolean.FALSE (object), but here we used privitive
        }

        //3.
        int maxLength=0;
        for(int num : nums){
            int length=1;

            int nextNum=num+1; //here no need to mark num as true because in the below code we will check if higher and lower nums exit or not, if exits they will be marked as true so they wont be checked again and if not there is not way we reach num again (if could not understand then ignore this comment)

        //4.
        //if next num is present as key and if its not visited increse length by 1
        while(hashmap.containsKey(nextNum) && hashmap.get(nextNum)==false){
            //mark T
            hashmap.put(nextNum, true);
            length++;
            nextNum++;
        }

        int prevNum=num-1;
        while(hashmap.containsKey(prevNum) && hashmap.get(prevNum)==false){
            hashmap.put(prevNum, true);
            length++;
            prevNum--;
        }

        maxLength=Math.max(maxLength, length);
        }
        return maxLength;
    }
}


//======
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
