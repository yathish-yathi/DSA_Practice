https://www.geeksforgeeks.org/problems/implementing-floyd-warshall2042/1

T O(n^3), S O(n^2)

// here we need keep on finding shortest path for all pairs(i,j) through all nodes(v)

class Solution {
    public void shortestDistance(int[][] mat) {
        // Code here
        int n = mat.length;
        
        for(int v=0; v<n; v++){
            for(int i=0; i<n; i++){
                for(int j=0; j<n; j++){
                    
                    //no path exixts through v node, so no change to exixting path 
                    if(mat[i][v]==-1 || mat[v][j]==-1){
                        continue;
                    }
                    
                    //No path exists between pairs, so path through v node 
                    //itself is shortest path
                    if(mat[i][j]==-1){
                        mat[i][j]=mat[i][v] + mat[v][j];
                    }else{
                        mat[i][j]=Math.min(mat[i][v] + mat[v][j], mat[i][j]);
                    }
                }
            }
        }
    }
}

==============
Floyd Warshall
Difficulty: Medium
The problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed graph. The graph is represented as an adjacency matrix. mat[i][j] denotes the weight of the edge from i to j. If mat[i][j] = -1, it means there is no edge from i to j.
Note: Modify the distances for every pair in place.

Examples :

Input: mat = [[0, 25], [-1, 0]]

Output: [[0, 25], [-1, 0]]

Explanation: The shortest distance between every pair is already given(if it exists).
Input: mat = [[0, 1, 43],[1, 0, 6], [-1, -1, 0]]

Output: [[0, 1, 7], [1, 0, 6], [-1, -1, 0]]

Explanation: We can reach 2 from 0 as 0->1->2 and the cost will be 1+6=7 which is less than 43.
Constraints:
1 <= mat.size() <= 100
-1 <= mat[ i ][ j ] <= 1000
