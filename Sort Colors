Medium , T O(n), S O(1)
link : https://leetcode.com/problems/sort-colors/description/

class Solution {
    //her we assume in the final answer start point start of 1s and end points end of 1's
    public void sortColors(int[] nums) {
        int i=0;
        int start=0;
        int end=nums.length-1;

        while(i<=end){
            switch (nums[i]){
                case 0 : swap(nums, i, start);
                        //here we increase i because all previous elements are checked and start was pointing to 1 so we know 0 was swaped with 1
                        i++;
                        start++;
                        break;
                
                case 1 : i++;
                        break;

                case 2 : swap(nums, i, end);
                //here we do not increase i because all next elements are not checked and we dont know which element end was pointing , so new swpped element need to be checked 
                        end--;
                        break;
            }
        }
    }

    public void swap(int[] arr, int i, int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
}


//problem//
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
