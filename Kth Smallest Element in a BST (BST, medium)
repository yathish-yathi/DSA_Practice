https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/

T O(k), S O(1)

//perform inorder traversal and increase count at each inorder
//when count==k save value into array and return (we have used array to maintan count and kth value)
//We can find kth value by getting inorder traversal values into arrayList 
//then find kth element in array but not efficient (T O(n), S O(n))
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        
        int a[] = new int[2];
        a[0]=0; //a[0] => count
        a[1]=-1;//a[1] => kth value
        kthSmallest_helper(root, k, a);

        return a[1];
    }

    public void kthSmallest_helper(TreeNode root, int k, int[] a) {
        
        if(root==null) return;

        if(a[0]>k) return;

        kthSmallest_helper(root.left, k, a);

        //update count and check
        a[0] = a[0]+1;
        if(a[0]==k){
            a[1]=root.val;
            return;
        }

        kthSmallest_helper(root.right, k, a);

    }
}

//======
Kth Smallest Element in a BST
Medium

Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Example 1:


Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:


Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Constraints:

The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104
