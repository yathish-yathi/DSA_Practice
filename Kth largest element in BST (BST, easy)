https://www.geeksforgeeks.org/problems/kth-largest-element-in-bst/1
Same as kth smallest element just interchange left-inorder-right TO right-inorder-right
https://leetcode.com/problems/kth-smallest-element-in-a-bst/

T O(k), S O(1)

//perform inorder traversal and increase count at each inorder
//when count==k save value into array and return (we have used array to maintan count and kth value)
//We can find kth value by getting inorder traversal values into arrayList 
//then find kth element in array but not efficient (T O(n), S O(n))
/*
class Node
{
    int data;
    Node left;
    Node right;
    Node(int data)
    {
        this.data = data;
        left=null;
        right=null;
    }
}
*/
class Solution
{
    // return the Kth largest element in the given BST rooted at 'root'
    public int kthLargest(Node root,int K)
    {
        //Your code here
        int a[] = new int[2];
        a[0]=0; //a[0] => count
        a[1]=-1;//a[1] => kth value
        kthSmallest_helper(root, K, a);

        return a[1];
    }
    
    public void kthSmallest_helper(Node root, int K, int[] a) {
        
        if(root==null) return;

        if(a[0]>K) return;

        kthSmallest_helper(root.right, K, a);

        //update count and check
        a[0] = a[0]+1;
        if(a[0]==K){
            a[1]=root.data;
            return;
        }

        kthSmallest_helper(root.left, K, a);

    }
}

//=========
Kth largest element in BST
Difficulty: Easy
Given a Binary Search Tree. Your task is to complete the function which will return the Kth largest element without doing any modification in Binary Search Tree.

Example 1:

Input:
      4
    /   \
   2     9
k = 2 
Output: 4
Example 2:

Input:
       9
        \ 
          10
K = 1
Output: 10
Your Task:
You don't need to read input or print anything. Your task is to complete the function kthLargest() which takes the root of the BST and an integer K as inputs and returns the Kth largest element in the given BST.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(H) where H is max recursion stack of height H at a given time.

Constraints:
1 <= N <= 105
1 <= K <= N
