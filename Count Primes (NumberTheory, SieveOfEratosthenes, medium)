https://leetcode.com/problems/count-primes/description/

T O(N), S O(N)

//create a array Prime and fill as true(prime) assuming all numbers in that range are prime
//with a for loop check if index is prime(true) if yes then keep that index
//as it is and mark it's multiple as false(non prime) 
//at end return number of true

class Solution {
    public int countPrimes(int n) {

        if(n<=2) return 0;

        Boolean[] prime = new Boolean[n];

        Arrays.fill(prime, true);

        prime[0]=false;
        prime[1]=false;

        for(int i=2; i<=n-1; i++){
            if(prime[i]){
                for(int j=i+i; j<=n-1; j=j+i){ //we can also write j=i*i but for larger numbers int will overflow giving a -ve number
                    prime[j]=false;
                }
            }
        }

        int count=0;
        for(int i=0; i<=n-1; i++){
            if(prime[i]){
                count++;
            }
        }

        return count;
    }
}

============
Count Primes
Medium

Given an integer n, return the number of prime numbers that are strictly less than n.

Example 1:
Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.

Example 2:
Input: n = 0
Output: 0
Example 3:

Input: n = 1
Output: 0
 

Constraints:

0 <= n <= 5 * 106
