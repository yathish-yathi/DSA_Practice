https://www.geeksforgeeks.org/problems/knapsack-with-duplicate-items4201/1

//Code is same as normal knap sack ,here Each item can be taken any number of times so in inclusion condition we keep on picking same items until no space left in bag
//normal knap sack : int val1 = val[i-1] + dp[i-1][w-wt[i-1]];
//this knap sack :   int val1 = val[i-1] + dp[i][w-wt[i-1]];

class Solution {
    static int knapSack(int val[], int wt[], int capacity) {
        // code here
        int m = val.length;
        int n = capacity;
        
        int dp[][] = new int [m+1][n+1]; // +1 because we have added extra val=0 and wt=0 
        
        for(int i=0; i<=m; i++){
            for(int w=0; w<=n; w++){
                
                if(i==0 || w==0) {
                    dp[i][w]=0;
                }
                //Item Can be included cur capacity >= items weight
                else if( w >= wt[i-1]){
                    //included
                    int val1 = val[i-1] + dp[i][w - wt[i-1]];
                    //Excluded
                    int val2 = dp[i-1][w];
                    
                    dp[i][w] = Math.max(val1, val2);
                }
                //Item can not be included (Excluded)
                else{
                    dp[i][w] = dp[i-1][w];
                }
            }
        }
        return dp[m][n];
    }
}

===============
Knapsack with Duplicate Items

Given a set of items, each with a weight and a value, represented by the array wt and val respectively. Also, a knapsack with a weight limit capacity.
The task is to fill the knapsack in such a way that we can get the maximum profit. Return the maximum profit.
Note: Each item can be taken any number of times.

Examples:

Input: val = [1, 1], wt = [2, 1], capacity = 3
Output: 3
Explanation: The optimal choice is to pick the 2nd element 3 times.
Input: val[] = [6, 1, 7, 7], wt[] = [1, 3, 4, 5], capacity = 8
Output: 48
Explanation: The optimal choice is to pick the 1st element 8 times.
Input: val[] = [6, 8, 7, 100], wt[] = [2, 3, 4, 5], capacity = 1
Output: 0
Explanation: We can't pick any element .hence, total profit is 0.
Constraints:
1 <= val.size() = wt.size() <= 1000
1 <= capacity <= 1000
1 <= val[i], wt[i] <= 100
