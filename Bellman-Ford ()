https://www.geeksforgeeks.org/problems/distance-from-the-source-bellman-ford-algorithm/0

T O(V*E), S O(V)

//1. Defind distance[] array and initialise all values to 10^8 and src to 0
//2. repease below 3rd and 4th step (V-1) times
//3. traverse from 0 to V (in this case all edges) 
//4. if dist[src/u] + (wt between src and dest) < dist[dest/v] (present distance)
// then update dist[v] = dist[u] + wt
//=> till this is bellman fords algorithm (we know that if there is no negetive 
// cycle exists then the will not be further change is distance after (V-1) interatiosn)
//6. check 4th condition one more time if it's true then there is a negetive cycle so return int[]{-1}

// User function Template for Java
/*   Function to implement Bellman Ford
 *   edges: 2D array which represents the graph
 *   src: source vertex
 *   V: number of vertices
 */
class Solution {
    static int[] bellmanFord(int V, int[][] edges, int src) {
        // Write your code here
        int dist[] = new int[V];
        for(int i=0; i<V; i++){
            dist[i]=100000000;
        }
        dist[src]=0;

        return bellmanFordUtil(V, edges, dist);
    }
    
    static int[] bellmanFordUtil(int V, int[][] edges, int[] dist) {
        
        for(int k=0; k<(V-1); k++){
            
            for(int i=0; i<edges.length; i++){
                int u=edges[i][0];
                int v=edges[i][1];
                int wt=edges[i][2];
                
                if(dist[u] != 100000000 && dist[u]+wt < dist[v]){
                    dist[v] = dist[u]+wt;
                }
            }
            
        }

        //to check -ve cycle exits or not
        for(int i=0; i<edges.length; i++){
                int u=edges[i][0];
                int v=edges[i][1];
                int wt=edges[i][2];
                //if there is no negetive cycle then this if condition should never be true
                //i.e. once (V-1) time completed then there must not be any further reduction in distance
                if(dist[u] != 100000000 && dist[u]+wt < dist[v]){
                    return new int[]{-1};
                }
            }
        return dist;
    }
}



======
Bellman-Ford
Difficulty: Medium
Given a weighted and directed graph of v vertices and edges, Find the shortest distance of all the vertex's from the source vertex, src and return a list of integers where the ith integer denotes the distance of the ith node from the source node. If a vertices can't be reach from the s then mark the distance as 10^8.
Note: If the graph contains a negative cycle then return an array consisting of only -1.

Examples:

Input: edges = [[0,1,9]], src = 0

Output: [0, 9]
Explanation: Shortest distance of all nodes from source is printed.
Input: edges = [[0,1,5], [1,0,3], [1,2,-1], [2,0,1]], src = 2

Output: [1, 6, 0]
Explanation: For nodes 2 to 0, we can follow the path: 2-0. This has a distance of 1. For nodes 2 to 1, we cam follow the path: 2-0-1, which has a distance of 1+5 = 6,
Constraints:
1 ≤ V ≤ 500
1 ≤ E ≤ V*(V-1)
-1000 ≤ data of nodes, weight ≤ 1000
0 ≤ S < V
