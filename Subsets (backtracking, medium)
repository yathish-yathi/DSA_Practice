https://leetcode.com/problems/subsets/description/
https://www.youtube.com/watch?v=taIvqOIT3cM

T O(2^N), S O(N)

//include and exclude each element at each step and add to ans when i==length of nums
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> cur=new ArrayList<>();

        recursion(nums, ans, cur, 0);
        return ans;
    }

    public void recursion(int[] nums, List<List<Integer>> ans, List<Integer> cur, int i){

        if(i==nums.length){ 
        ans.add(new ArrayList<Integer>(cur)); //Note : even though cur is list we have created new arrayList and added to ans because arrayList store address of cur not actual value so when value of cur changes in next recursion ans will also be affected
        System.out.println("base "+cur);
        System.out.println(ans);
            return;
        }

        //include ith element and do recursion
        cur.add(nums[i]);
        System.out.println(cur);
        recursion(nums, ans, cur, i+1);

        //recursion without adding ith element (we remove last element size-1)
        cur.remove(cur.size()-1);
        recursion(nums, ans, cur, i+1);

    }
}

//====
Subsets
Medium

Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.
