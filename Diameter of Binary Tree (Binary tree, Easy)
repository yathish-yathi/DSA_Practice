https://leetcode.com/problems/diameter-of-binary-tree/description/

T O(n), S O(height of tree)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        int maxDia[]=new int[1];

        findMaxDia(root, maxDia);

        return maxDia[0];
    }

    public int findMaxDia(TreeNode root,int[] maxDia){

        if(root==null) return 0;

        int Lh=findMaxDia(root.left, maxDia);
        int Rh=findMaxDia(root.right, maxDia);

        maxDia[0]=Math.max(maxDia[0], Lh+Rh); //we have not Lh+Rh+1 becasue test case's out put is 3 not 4 (assuming root is not counted)

        int maxHeight = Math.max(Lh,Rh) + 1;

        return maxHeight;

    }
}

//========
Diameter of Binary Tree
Easy

Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

 

Example 1:


Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
Example 2:

Input: root = [1,2]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-100 <= Node.val <= 100
