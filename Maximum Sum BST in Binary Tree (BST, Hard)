https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/
https://www.youtube.com/watch?v=Zz7R9I9j2kI

T O(n), S O(1)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxSumBST(TreeNode root) {
        Data data = maxSumBST_helper(root);
        
        return maxSum;
    }

    int maxSum = 0; // though we can have -ve interger values we are considered 0 instead of integer.MIN_VALUE is because if test case 3 , which says ans can not be -ve, there for if -ve then ans is 0.

    class Data{
        boolean isBST;
        int min;
        int max;
        int sum;

        public Data(boolean isBST, int min, int max, int sum){
            this.isBST=isBST;
            this.min=min;
            this.max=max;
            this.sum=sum;
        }
    }

    public Data maxSumBST_helper(TreeNode root) {
        
        if(root==null){
            return new Data(true, Integer.MAX_VALUE, Integer.MIN_VALUE, 0);
        }

        Data left = maxSumBST_helper(root.left);
        Data right = maxSumBST_helper(root.right);

        if(left.isBST && right.isBST && left.max<root.val && right.min>root.val){
            int sum = (left.sum+right.sum+root.val);
            maxSum = Math.max(maxSum, sum);
            return new Data(true, Math.min(left.min, root.val)
                ,Math.max(right.max, root.val), sum);
        }

        int sum = Math.max(left.sum,right.sum);
        maxSum = Math.max(maxSum, sum);
        return new Data(false, 0, 0, sum);
    }
}

//===========
Maximum Sum BST in Binary Tree
Hard

Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:



Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
Output: 20
Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.
Example 2:



Input: root = [4,3,null,1,2]
Output: 2
Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.
Example 3:

Input: root = [-4,-2,-5]
Output: 0
Explanation: All values are negatives. Return an empty BST.
 

Constraints:

The number of nodes in the tree is in the range [1, 4 * 104].
-4 * 104 <= Node.val <= 4 * 104
