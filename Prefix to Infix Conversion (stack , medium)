https://www.geeksforgeeks.org/problems/prefix-to-infix-conversion/1
refer Prefix, Infix, postFix videos
https://www.youtube.com/playlist?list=PLzjZaW71kMwRTtDWYVPvkJypUpKWbuT7_

T O(N) , S O(N)

//this from "prefix" to infix so we start traversing from behind
//here we pick each elemnt as string ch one by one from last
//pre_exp.substring(i, i+1); is used to get each letter as string here i+1 is ecluded so even if its out of bound no issues
//if ch is alphabet then add into stack
//else its operator so need to perform operation b/w top 2 element of stack
//But in this problem we need to create a string 
// In prefix first top is num1 and second top is num2 which will be reverse for postfix
//after generation string push string back to stack
//One all element is traversed only one element is left in stack which is out answer , pop and return it
class Solution {
    static String preToInfix(String pre_exp) {
        // code here
        Stack<String> s=new Stack();
        
        for(int i=pre_exp.length()-1; i>=0; i--){
            String ch=pre_exp.substring(i, i+1);
            if(ch.matches("^[a-zA-Z]$")){
                s.push(ch);
            }else{
               //if(s.size()<2) continue; //this not needed

                String num1=s.pop();
                String num2=s.pop();
                
                String str="("+num1+ch+num2+")";
                
                s.push(str);
            }
        }
        return s.pop();
    }
}

//===========
Prefix to Infix Conversion
You are given a string S of size N that represents the prefix form of a valid mathematical expression. Convert it to its infix form.

Example 1:

Input: 
*-A/BC-/AKL
Output: 
((A-(B/C))*((A/K)-L))
Explanation: 
The above output is its valid infix form.
Your Task:

Complete the function string preToInfix(string pre_exp), which takes a prefix string as input and return its infix form.

 

Expected Time Complexity: O(N).

Expected Auxiliary Space: O(N).

Constraints:

3<=|S|<=104
