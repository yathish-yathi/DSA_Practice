https://www.geeksforgeeks.org/problems/floor-in-bst/1

T O(height of BST), S O(1)

// We use a while loop to travel from top to bottom till we find null and update floor on the way
//1. initially assign -1 to floor and we will return this if x itself is the lowest
//2. run while loop untill null if found in log n traversal
//3. if we find value equal to x then break and return the same
//4. if X is greater than cur_root then its on right side, since this cur_root is
//LESS than x  if we are traveling right, it could be our floor so update floor value
//5. if X is less than cur_root then check left root int floor = -1;

class Solution {
    public static int floor(Node root, int x) {
        // Code here
        //1.
        int floor = -1;
        //2.
        while(root!=null){
            //3.
            if(x == root.data){
                floor=x;
                break;
            }
            //4.
            if(x > root.data){
                floor=root.data;
                root=root.right;
            }
            //5.
            else{
                root=root.left;
            }
        }
        
        return floor;
    }
}
//======
Floor in BST
Difficulty: Medium

You are given a BST(Binary Search Tree) with n number of nodes and value x. your task is to find the greatest value node of the BST which is smaller than or equal to x.
Note: when x is smaller than the smallest node of BST then returns -1.

Example:

Input:
n = 7               2
                     \
                      81
                    /     \
                 42       87
                   \       \
                    66      90
                   /
                 45
x = 87
Output:
87
Explanation:
87 is present in tree so floor will be 87.
Example 2:

Input:
n = 4                     6
                           \
                            8
                          /   \
                        7       9
x = 11
Output:
9
Your Task:-
You don't need to read input or print anything. Complete the function floor() which takes the integer n and BST and integer x returns the floor value.

Constraint:
1 <= Noda data <= 109
1 <= n <= 105

Expected Time Complexity: O(height of tree)
Expected Space Complexity: O(height of tree)
