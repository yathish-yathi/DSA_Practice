https://leetcode.com/problems/course-schedule/description/

T O(N+V), S O(depth of graph or N)

//convert given prerequisites into graph then check for cyclic confition 
//if isCyclic is true then anwer is false as we can not complete course in this scenario, else true
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
        for(int i=0; i<numCourses; i++){
             graph.add(new ArrayList<Integer>());
        }

        for(int i=0; i<prerequisites.length; i++){
             int a = prerequisites[i][0];
             int b = prerequisites[i][1];
             graph.get(a).add(b);
        }
        
        boolean[] vis = new boolean[numCourses];
        boolean[] stack = new boolean[numCourses];

        for(int i=0; i<numCourses; i++){
            if(!vis[i]){
                if(isCyclic(graph, i, vis, stack)) return false;
            }
        }

        return true;
    }

    public boolean isCyclic(ArrayList<ArrayList<Integer>> adj, int cur,boolean vis[], boolean stack[]){
        
        vis[cur]=true;
        stack[cur]=true;
        
        for(int i : adj.get(cur)){
            if(stack[i]){
                return true;
            }else if(vis[i]){
                continue;
            }
            
            if(isCyclic(adj, i, vis, stack)) return true;
        }
        stack[cur]=false;
        return false;
    }
}

============
207. Course Schedule
Medium
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.
