https://www.geeksforgeeks.org/problems/spirally-traversing-a-matrix-1587115621/1
https://www.youtube.com/watch?v=jloOClIGQ0c

//        left=0       right=3
// top=0      1  2  3  4
//            5  6  7  8
//            9 10  11 12
// bottom=3   13 14 15 16
//
//1. we start traversing columm from left to right and add into list which completes all elements
//of TOP row so we bring top to next row by doing top++(moving down) (0th position to 1st position)
// 2. next add right column from top to bottom, once all elements from right column is added to list
// then we move right to one step inside to print it in next turn
//Note: in 3rd and 4th steps we have to re check the initial conditions of while loop because we modified top and right
//3. add elements of bottom row from right to left, the bottom--(moving up)
//4. add elements of left col from bottom to top, the left++(next col)
class Solution
{
    //Function to return a list of integers denoting spiral traversal of matrix.
    static ArrayList<Integer> spirallyTraverse(int matrix[][], int r, int c)
    {
        // code here 
        ArrayList<Integer> ans=new ArrayList<>();
        
        int left=0;
        int right=c-1; //note : left to right if column 0 to column c 
        int top=0;
        int bottom=r-1; // top to bottom means row 0 to row r
        
        while(left<=right && top<=bottom){
            
            //left to right
            for(int j=left; j<=right; j++){
                ans.add(matrix[top][j]);
            }
            top++;
            
            //top to bottom
            for(int i=top; i<=bottom; i++){
                ans.add(matrix[i][right]);
            }
            right--;
            
            //right to left
            //Note: we have to re check the initial conditions of while loop because we modified top
            if(top<=bottom){
                for(int j=right; j>=left; j--){
                    ans.add(matrix[bottom][j]);
                }
                bottom--;
            }
            
            //bottom to top
            //Note: we have to re check the initial conditions of while loop because we modified right
            if(left<=right){
                for(int i=bottom; i>=top; i--){
                    ans.add(matrix[i][left]);
                }
                left++;
            }
        }
        return ans;
    }
}

//==================
Given a matrix of size r*c. Traverse the matrix in spiral form.

Example 1:

Input:
r = 4, c = 4
matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12},
           {13, 14, 15,16}}
Output: 
1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10
Explanation:

Example 2:

Input:
r = 3, c = 4  
matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12}}
Output: 
1 2 3 4 8 12 11 10 9 5 6 7
Explanation:
Applying same technique as shown above, 
output for the 2nd testcase will be 
1 2 3 4 8 12 11 10 9 5 6 7.

Your Task:
You dont need to read input or print anything. Complete the function spirallyTraverse() that takes matrix, r and c as input parameters and returns a list of integers denoting the spiral traversal of matrix. 

Expected Time Complexity: O(r*c)
Expected Auxiliary Space: O(r*c), for returning the answer only.

Constraints:
1 <= r, c <= 100
0 <= matrixi <= 100
