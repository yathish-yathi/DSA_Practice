https://www.geeksforgeeks.org/problems/fractional-knapsack-1587115620/1
https://www.youtube.com/watch?v=F_DDzYnxO14


//we fill item with hightes value per each kg (1 kg) first (expensive item)
//Fisrt sort array objects in decending order based on v/w
//go on adding items as long as we have enough space left in bag for next item
//when not enough space left for next item calculate how much space is left
// and count value for remoing space and add

/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/

class Solution {
    // Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int w, Item arr[], int n) {
        // Your code here
        
        //Class to sort in decending order of value per 1 kg (highest per kg value first)
        class ItemComparator implements Comparator<Item> {
            
            public int compare(Item a, Item b){
                
                double r1 = (double)a.value/(double)a.weight;
                double r2 = (double)b.value/(double)b.weight;
                
                if(r2>r1) return 1;
                else if(r1>r2) return -1;
                else return 0;
            }
            
        }
        
        Arrays.sort(arr, new ItemComparator());
        
        double bagValue=0;
        double bagCurrentWeight=0;
        for(Item a : arr){
            
            if(bagCurrentWeight + a.weight < w){
                bagCurrentWeight += a.weight;
                bagValue += a.value;
            }
            else{
                double LeftBagCapacity = w - bagCurrentWeight;
                double r = (double)a.value/(double)a.weight;
                bagValue += LeftBagCapacity * r;
                break;
            }
        }
        
        return bagValue;
    }
}

//==========
Fractional Knapsack
Difficulty: Medium
Given weights and values of n items, we need to put these items in a knapsack of capacity w to get the maximum total value in the knapsack. Return a double value representing the maximum value in knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item here. The details of structure/class is defined in the comments above the given function.

Examples :

Input: n = 3, w = 50, value[] = [60,100,120], weight[] = [10,20,30]
Output: 240.000000
Explanation: Take the item with value 60 and weight 10, value 100 and weight 20 and split the third item with value 120 and weight 30, to fit it into weight 20. so it becomes (120/30)*20=80, so the total value becomes 60+100+80.0=240.0 Thus, total maximum value of item we can have is 240.00 from the given capacity of sack. 
Input: n = 2, w = 50, value[] = [60,100], weight[] = [10,20]
Output: 160.000000
Explanation: Take both the items completely, without breaking. Total maximum value of item we can have is 160.00 from the given capacity of sack.
Expected Time Complexity : O(n log n)
Expected Auxilliary Space: O(1)

Constraints:
1 <= n <= 105
1 <= w <= 109
1 <= valuei, weighti <= 104
