https://www.geeksforgeeks.org/problems/binary-tree-to-bst/1

T O(nlogn), S O(n)

//1. traverse BT and retrieve values into list
//2. sort values
//3. assigned values to BT with inorder traveresing
       
/*Structure of the node class is
class Node
{
    int data;
    Node left, right;
    Node(int item){
        data = item;
        left = right = null;
    }
} */


class Solution
{
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    Node binaryTreeToBST(Node root)
    {
       // Your code here
       //1. traverse BT and retrieve values into list
       List<Integer> values = new ArrayList<>();
       retrieveValues(root, values);
       
       //2. sort values
       Collections.sort(values);

       //3. assigned values to BT with inorder traveresing
       convertToBST(root, values);
       
       return root;
    }
    
    public void retrieveValues(Node root, List<Integer> values){
        if(root==null) return;
        
        retrieveValues(root.left, values);
        values.add(root.data);
        retrieveValues(root.right, values);
    }
    
    public void convertToBST(Node root, List<Integer> values){
        if(root==null) return;
        
        convertToBST(root.left, values);
        root.data=values.remove(0);
        convertToBST(root.right, values);
    }
}

===========
Binary Tree to BST
Difficulty: Easy

Given a Binary Tree, convert it to Binary Search Tree in such a way that keeps the original structure of Binary Tree intact.
 Example 1:

Input:
      1
    /   \
   2     3
Output: 
1 2 3
Explanation:
The converted BST will be 
      2
    /   \
   1     3

Example 2:

Input:
          1
       /    \
     2       3
   /        
 4       
Output: 
1 2 3 4
Explanation:
The converted BST will be

        3
      /   \
    2     4
  /
 1
Your Task:
You don't need to read input or print anything. Your task is to complete the function binaryTreeToBST() which takes the root of the Binary tree as input and returns the root of the BST. The driver code will print inorder traversal of the converted BST.

Expected Time Complexity: O(NLogN).
Expected Auxiliary Space: O(N).

Constraints:
1 <= Number of nodes <= 105

