Medium, T O(N), S O(1)
https://leetcode.com/problems/maximum-product-subarray/description/
https://www.youtube.com/watch?v=Y6B-7ZctiW8

//if all elements (no zeros) are positive and count if -ve is even then max product we get when we multiply all elements
//in we have odd nums of -ve or zeros in either left or right of any of them we wil get maximum product
//1. we traverse from left and right towards other side and keep calculating product,
//and keep on updating maximum , when we encounter 0 reupdate left product and right product to 1.   

class Solution {
    public int maxProduct(int[] nums) {
        int n=nums.length;
        int leftProduct=1;
        int rightProduct=1;
        int maxProduct=nums[0];


        for(int i=0; i<n; i++){
            
            leftProduct=leftProduct*nums[i];

            rightProduct=rightProduct*nums[n-1-i];

            maxProduct=Math.max(maxProduct,Math.max(leftProduct,rightProduct));

            leftProduct=leftProduct==0?1:leftProduct;
            rightProduct=rightProduct==0?1:rightProduct;
        }
        return maxProduct;
    }
}

//======

Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.


Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
