https://www.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1
https://www.youtube.com/watch?v=MCvGwtkqJS0

sliding-window,Arrays,Dequeue
T O(N), S O(N)

//note: we are storing index of array not actual element it helps in (so whenever we say adding 
//element to dq we are actually adding it index value (i))
//1. processe first k elements
//2.peek the from element of dq and add coresponding  front elemtent from array to ans list.
//3. remove element which belong to previous window from front
//4. for every new element, the previous smaller elements are useless so remove them from dq

class Solution
{
    //Function to find maximum of each subarray of size k.
    static ArrayList <Integer> max_of_subarrays(int arr[], int n, int k)
    {
        // Your code here
        ArrayList<Integer> ans=new ArrayList<>();
        
        Deque<Integer> dq=new ArrayDeque<>();
        
        //1. processe first k elements
        int i=0;
        for( ; i<k;i++){
            while(!dq.isEmpty() && arr[dq.peekLast()] <= arr[i]){
                //remove from last if its < new element
                dq.removeLast();
            }
            //add new to last
            dq.addLast(i);
        }
        
        //proccess rest of element
        for( ; i<n; i++){
            //element at front will be maximum for previous window , so add front to ans list
            ans.add(arr[dq.peekFirst()]);
            
            //remove any elemtns from previous widow from front
            while(!dq.isEmpty() && dq.peekFirst()<=(i-k)){
                dq.removeFirst();
            }
            
            //remove from last if its < new element
             while(!dq.isEmpty() && arr[dq.peekLast()] <= arr[i]){
                dq.removeLast();
            }
            
            //add new to last
            dq.addLast(i);
        }
        //since for loop break at last index i ,so we have not added maximum of last element to 
        // ans , so adding it now.
        ans.add(arr[dq.peekFirst()]);
        
        return ans;
    }
}

//======
Given an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.

Example 1:

Input:
N = 9, K = 3
arr[] = 1 2 3 1 4 5 2 3 6
Output: 
3 3 4 5 5 5 6 
Explanation: 
1st contiguous subarray = {1 2 3} Max = 3
2nd contiguous subarray = {2 3 1} Max = 3
3rd contiguous subarray = {3 1 4} Max = 4
4th contiguous subarray = {1 4 5} Max = 5
5th contiguous subarray = {4 5 2} Max = 5
6th contiguous subarray = {5 2 3} Max = 5
7th contiguous subarray = {2 3 6} Max = 6
Example 2:

Input:
N = 10, K = 4
arr[] = 8 5 10 7 9 4 15 12 90 13
Output: 
10 10 10 15 15 90 90
Explanation: 
1st contiguous subarray = {8 5 10 7}, Max = 10
2nd contiguous subarray = {5 10 7 9}, Max = 10
3rd contiguous subarray = {10 7 9 4}, Max = 10
4th contiguous subarray = {7 9 4 15}, Max = 15
5th contiguous subarray = {9 4 15 12}, 
Max = 15
6th contiguous subarray = {4 15 12 90},
Max = 90
7th contiguous subarray = {15 12 90 13}, 
Max = 90
Your Task:  
You dont need to read input or print anything. Complete the function max_of_subarrays() which takes the array, N and K as input parameters and returns a list of integers denoting the maximum of every contiguous subarray of size K.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(k)

Constraints:
1 ≤ N ≤ 106
1 ≤ K ≤ N
0 ≤ arr[i] ≤ 109
