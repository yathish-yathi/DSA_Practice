https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/
with small modification to "Construct Binary Tree from pre-order and in-order Traversal"

T O(N), S O(N)

//Observations from Inorder and Post-order array with respect to tree diagram
//i. Inorder : all element present at left side of root are part of left subtree and all element present at right side of root are part of right subtree
//ii. Post-order : elements present from of array is the root
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer, Integer> map = new HashMap<>();

        for(int i=0; i<inorder.length; i++){
            map.put(inorder[i], i);
        }

        //return buildTreeUtil(inorder, 0, inorder.length-1, postorder, 0, postorder.length-1, map);

        return buildTreeUtil(postorder, map, postorder.length-1, 0, inorder.length-1);

    }

    // public TreeNode buildTreeUtil(int[] inorder, int in_start, int in_end, int[] postorder, int post_start, int post_end, Map<Integer, Integer> map){

    //     if(in_start > in_end || post_start > post_end) return null;

    //     TreeNode root = new TreeNode(postorder[post_end]);

    //     int root_index = map.get(postorder[post_end]);
    //     int left_count = root_index - in_start;

    //     root.left = buildTreeUtil(inorder, in_start, root_index-1, postorder, post_start,post_start+left_count-1, map);

    //     root.right = buildTreeUtil(inorder, root_index+1, in_end, postorder, post_start+left_count, post_end-1, map);

    //     return root;
    // }

    public TreeNode buildTreeUtil(int[] postorder, Map<Integer, Integer> map, int postorder_root_index, int inorder_start_index, int inorder_end_index){

        //creating Node
        TreeNode root = new TreeNode(postorder[postorder_root_index]);

        //Geting index of root in inorder array from map using value of root
        int mid = map.get(postorder[postorder_root_index]);

        //checking if elements are present to left side of mid of Inorder
        //here (inorder_end_index - mid) is count of elements at right of mid of Inorder
        if(inorder_start_index < mid){
            root.left = buildTreeUtil(postorder, map, postorder_root_index - (inorder_end_index - mid) - 1, inorder_start_index, mid-1);
        }

        //checking if elements are present to right side of mid of Inorder
        if(inorder_end_index > mid){
            root.right = buildTreeUtil(postorder, map, postorder_root_index - 1, mid+1, inorder_end_index);
        }

        return root;
    }
}
//======
Construct Binary Tree from Inorder and Postorder Traversal
Medium

Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: inorder = [-1], postorder = [-1]
Output: [-1]
 

Constraints:

1 <= inorder.length <= 3000
postorder.length == inorder.length
-3000 <= inorder[i], postorder[i] <= 3000
inorder and postorder consist of unique values.
Each value of postorder also appears in inorder.
inorder is guaranteed to be the inorder traversal of the tree.
postorder is guaranteed to be the postorder traversal of the tree.
