Medium,  T O(nlogn) (Merge Sort Time Complexity: O(logn) + Merge Operation Time Complexity:O(n) , S O(n) (Temporary Arrays)
https://www.geeksforgeeks.org/problems/inversion-of-array-1587115620/1
https://www.youtube.com/watch?v=kQ1mJlwW-c0


//use same merge sort algorithm make some changes in else condition to count inverse and keep trak of it
//count inversion while temp2>temp1 (else)
//concept : count of inversion = how many elements in temp1 is greater than
//current jth element in temp2 
class Solution
{

    static long inversionCount(long arr[], long N)
    {

       return mergeSort(arr, 0, N-1);
      
    }

    static long mergeSort(long arr[], long l, long r)
    {
        //code here
        long inversion=0l;
        //base condition l<r
        if(l<r){
            //find mid
            long mid=(l+r)/2;
            //sort left and right
            inversion+=mergeSort(arr, l, mid);
            inversion+=mergeSort(arr, mid+1, r);
            
            //merge left and right
            inversion+=merge(arr, l, mid, r);
        }
        return inversion;
    }
    
     static long merge(long arr[], long l, long m, long r)
    {
         // Your code here
         //finding length of left and right array
         long n1=m-l+1;
         long n2=r-m;
         
         //creating temp left and right array
         long[] temp1=new long[(int) n1];
         long[] temp2=new long[(int) n2];
         
         //add into temp
         for(long x=0; x<n1; x++){
             temp1[(int) x]=arr[(int) (l+x)];
         }
         
         
         for(long x=0; x<n2; x++){
             temp2[(int) x]=arr[(int) (m+1+x)];
         }
         
         
         //use 2  pointer concept 
         long inversion=0l;
         long i=0, j=0;
         long k=l;
         while(i<n1 && j<n2){
             if(temp1[(int) i]<=temp2[(int) j]){
                 arr[(int) k]=temp1[(int) i];
                 i++;
             }else{
                 arr[(int) k]=temp2[(int) j];
                 j++;
                 //count inversion while temp2>temp1 (else)
                 //concept : count of inversion = how many elements in temp1 is greater than
                 //current jth element in temp2 
                 inversion=inversion+(n1-i);
             }
             
             k++;
         }
         
         //add remaining (either of the loop which did not fail previous while loop will hit)
         while(i<n1){
             arr[(int) k]=temp1[(int) i];
             i++;
             k++;
         }
         
         while(j<n2){
             arr[(int) k]=temp2[(int) j];
             j++;
             k++;
         }
         return inversion;
    }
}

//=======


Given an array of integers. Find the Inversion Count in the array. 

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.
 

Example 1:

Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 
has three inversions (2, 1), (4, 1), (4, 3).
Example 2:

Input: N = 5
arr[] = {2, 3, 4, 5, 6}
Output: 0
Explanation: As the sequence is already 
sorted so there is no inversion count.
Example 3:

Input: N = 3, arr[] = {10, 10, 10}
Output: 0
Explanation: As all the elements of array 
are same, so there is no inversion count.
Your Task:

You don't need to read input or print anything.
Your task is to complete the function inversionCount() which takes the array arr[] and the size of the array as inputs and returns the inversion count of the given array.

Expected Time Complexity: O(NLogN).
Expected Auxiliary Space: O(N).

Constraints:
1 ≤ N ≤ 5*105
1 ≤ arr[i] ≤ 1018
