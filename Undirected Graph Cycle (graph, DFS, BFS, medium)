https://www.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

T O(n) , S O(n) n=depth of recursion stack

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean vis[] = new boolean[adj.size()];
        
        //this loop is required in case of disconnected graphs
        for(int i=0; i<adj.size(); i++){
            if(!vis[i]){
                if(isCycleUtil(adj, vis, i, -1)) return true;
            }
        }
        return false;
    }
    
    public boolean isCycleUtil(ArrayList<ArrayList<Integer>> adj, boolean vis[], int cur, int par) {
        
        vis[cur]=true;
        
        for(int i : adj.get(cur)){
            
            //if node is visited and it is not its parent then there exits a cycle
            if(vis[i] && i!=par) return true;
            
            if(!vis[i]){
                if(isCycleUtil(adj, vis, i, cur)) return true;
            }
        }

        return false;
    }
}
==========
Using DFS : 
//=> if node is visited and if it is not its parent then there exist a cyvle.

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean vis[] = new boolean[adj.size()];
        
        //this loop is required in case of disconnected graphs
        for(int i=0; i<adj.size(); i++){
            if(!vis[i]){
                if(isCycleUtil(adj, vis, i, -1)) return true;
            }
        }
        return false;
    }
    
    public boolean isCycleUtil(ArrayList<ArrayList<Integer>> adj, boolean vis[], int cur, int par) {
        
        vis[cur]=true;
        
        for(int i : adj.get(cur)){
            
            //if node is visited and it is not its parent then there exits a cycle
            if(vis[i] && i!=par) return true;
            
            if(!vis[i]){
                if(isCycleUtil(adj, vis, i, cur)) return true;
            }
        }

        return false;
    }
}

Using BFS :

//=> if duplicate nodes got added into queue that means there exist a cyvle.

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean vis[] = new boolean[adj.size()];
        
        //this loop is required in case of disconnected graphs
        for(int i=0; i<adj.size(); i++){
            if(!vis[i]){
                if(isCycleBFS(adj, vis, i)) return true;
            }
        }
        return false;
    }
    
    public boolean isCycleBFS(ArrayList<ArrayList<Integer>> adj, boolean vis[], int i) {
        
        Queue<Integer> q = new LinkedList<>();
        
        q.add(i);
        
        while(!q.isEmpty()){
            int cur = q.poll();
            
            //if recently polled node was already visited (same was polled before this) then there exits a cycle 
            if(vis[cur]) return true;
            
            vis[cur]=true;
            
            for(int j : adj.get(cur)){
                if(!vis[j]){
                    q.add(j);
                }
            }
        }
        

        return false;
    }
}

===================
Undirected Graph Cycle
Difficulty: Medium
Given an undirected graph with V vertices labelled from 0 to V-1 and E edges, check whether the graph contains any cycle or not. The Graph is represented as an adjacency list, where adj[i] contains all the vertices that are directly connected to vertex i.

NOTE: The adjacency list represents undirected edges, meaning that if there is an edge between vertex i and vertex j, both j will be adj[i] and i will be in adj[j].

Examples:

Input: adj = [[1], [0,2,4], [1,3], [2,4], [1,3]] 
Output: 1
Explanation: 

1->2->3->4->1 is a cycle.
Input: adj = [[], [2], [1,3], [2]]
Output: 0
Explanation: 

No cycle in the graph.
Constraints:
1 ≤ adj.size() ≤ 105
