https://www.geeksforgeeks.org/problems/job-sequencing-problem-1587115620/1
https://www.youtube.com/watch?v=QbwltemZbRg

T O(max_deadline*nlogn) [we can ignore max_deadline as its will be smaller but we can use concept of Disjoint Set Union (DSU) to get time complexity to perfect O (nlogn)], S O(n)

//Note : dead line is a running time and each job take 1 unit of time 
//Plan to get max profit is first choose Job with max profit and finish it at its
//deadline so that time before this can be used to other jobs
//we use boolean time array to check if we have completed any job previously at 
//any time
//1. sort Jobs based on profit
//2. find max dead line and create boolean array of that size(time)
//3. travers the jobs from max profit to least 
//3a.complete job at its max time (if dead line is 3 o'clock we finish task at
// 3 o'clock and mark time[3-1]=true ) now time(slot) remaining for other taks
// is after 3 and beofore 3 (1 - 2 o'clock)
//3b. if we get next job with same deadline 3 we traverse time array from 3 to
// 1 and when we get a empty time (false) we perform that job at that time.
//4. return count and profit as array
class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Your code here
        class SortByProfit implements Comparator<Job>{
           public int compare(Job a, Job b){
                if(a.profit>b.profit) return -1;
                else if(a.profit<b.profit) return 1;
                else return 0;
            }
        }
        
        //1. sort 
        Arrays.sort(arr, new SortByProfit());
        
        //2. find max and create boolean array
        int max_deadline = 0;
        for(Job j : arr){
            max_deadline=Math.max(max_deadline, j.deadline);
        }
        
        //3.
        boolean[] time=new boolean[max_deadline]; 
        int profit=0;
        int count=0;
        for(Job j : arr){// by using Disjoint Set Union (DSU) we can reduce time complexity to perfect O (nlogn)
            for(int i=j.deadline-1; i>=0; i--){
                if(!time[i]){
                    time[i]=true;
                    count++;
                    profit+=j.profit;
                    break;
                }
            }
        }
        return new int[]{count, profit};
    }
}

/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}
*/


//========
Job Sequencing Problem
Difficulty: Medium
Given a set of N jobs where each jobi has a deadline and profit associated with it.

Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit associated with job if and only if the job is completed by its deadline.

Find the number of jobs done and the maximum profit.

Note: Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job. Deadline of the job is the time before which job needs to be completed to earn the profit.


Example 1:

Input:
N = 4
Jobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}
Output:
2 60
Explanation:
Job1 and Job3 can be done with
maximum profit of 60 (20+40).
Example 2:

Input:
N = 5
Jobs = {(1,2,100),(2,1,19),(3,2,27),
        (4,1,25),(5,1,15)}
Output:
2 127
Explanation:
2 jobs can be done with
maximum profit of 127 (100+27).

Your Task :
You don't need to read input or print anything. Your task is to complete the function JobScheduling() which takes an integer N and an array of Jobs(Job id, Deadline, Profit) as input and returns the count of jobs and maximum profit as a list or vector of 2 elements.


Expected Time Complexity: O(NlogN)
Expected Auxilliary Space: O(N)


Constraints:
1 <= N <= 105
1 <= Deadline <= N
1 <= Profit <= 500
