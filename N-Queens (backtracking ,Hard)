https://leetcode.com/problems/n-queens/description/
https://www.youtube.com/watch?v=i05Ju7AftcM
https://takeuforward.org/data-structure/n-queen-problem-return-all-distinct-solutions-to-the-n-queens-puzzle/

//condition to place queen left-right, up-down, diagonaly there should not be other queen
//here we try to place queen col by col(left to right) checking all rows(top to bottom) 
//in this code while placing queen we check left (since right side is not yet place not need to check right) of queen for any other queens
//no need to check top and bottom because while chekcing options for col we place only one queen at a time
//then upper left upper diagonal and left lower diagonal (ref link in github for left and diagonal logic)
//if above condition are met then we place queen in that position and goto next col and again check each row recursively
//if we reached till base condition that means we were able to place all n queens
class Solution {
    public List<List<String>> solveNQueens(int n) {
        
        List<List<String>> ans=new ArrayList<>();
        char[][] board=new char[n][n];
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                board[i][j]='.';
            }
        }

        int[] left=new int[n];
        int[] upDia=new int[2*n-1];
        int[] lowDia=new int[2*n-1];

        solve(n, board, left, upDia, lowDia, 0, ans);

        return ans;
    }

    public void solve(int n, char[][] board, int[] left, int[] upDia, int[] lowDia,int col, List<List<String>> ans){
        if(col==n){
            ans.add(constructListOfStrings(board));
            return;
        }

        for(int row=0; row<n; row++){
            if(left[row]==0 && upDia[col-row+n-1]==0 && lowDia[row+col]==0){
                board[row][col]='Q';
                left[row]=1;
                upDia[col-row+n-1]=1;
                lowDia[row+col]=1;
                solve(n, board, left, upDia, lowDia, col+1, ans);

                board[row][col]='.';
                left[row]=0;
                upDia[col-row+n-1]=0;
                lowDia[row+col]=0;
            }
        }
    }

    List<String> constructListOfStrings(char[][] board){
        List<String> list=new ArrayList<>(); //LinkedList
        for(int i=0; i<board.length; i++){
                String s =new String(board[i]);
                list.add(s);
        }
        return list;
    }
}

//==========
N-Queens
Hard

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9
