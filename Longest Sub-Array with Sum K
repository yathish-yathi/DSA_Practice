//Optimun solution when when negetives are present (tags : prefix sum Map)
class Solution{
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int A[], int N, int K) {
        //Complete the function
        Map<Integer, Integer> prefixSumMap = new HashMap<>();
        int sum=0;
        int len=0;
        int maxLen=0;
        
        for(int i=0; i<N; i++){
            sum+=A[i];
            
            if(sum==K){
                len=i+1;
                maxLen=Math.max(maxLen, len);
            }
            
            int rem=sum-K;
            
            if(prefixSumMap.containsKey(rem)){
                len=i-prefixSumMap.get(rem);
                maxLen=Math.max(maxLen, len);
            }
            
            if(!prefixSumMap.containsKey(sum)){
                prefixSumMap.put(sum, i);
            }
        }
        return maxLen;
    }
}

t: O(n^2) S: 0(n)
//=======//
Optimum approch when only 0 and positives present in an array (whole numbers)

class Solution{  
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int A[], int N, int K) {
        int left=0;
        int right=0;
        int sum=0;
        int len=0;
        int maxLen=0;
        while(right<N){
            
            sum+=A[right];
            
            while(sum>K && left<right){
                sum-=A[left];
                left++;
            }
            
            if(sum==K){
                len=right-left+1;
                maxLen=Math.max(maxLen, len);
            }
            
            right++;
        }
        return maxLen;
    }
}

//=============//
Given an array containing N integers and an integer K., Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value K.

 

Example 1:
 

Input :
A[] = {10, 5, 2, 7, 1, 9}
K = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.
Example 2:

Input : 
A[] = {-1, 2, 3}
K = 6
Output : 0
Explanation: 
There is no such sub-array with sum 6.
Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function lenOfLongSubarr() that takes an array (A), sizeOfArray (n),  sum (K)and returns the required length of the longest Sub-Array. The driver code takes care of the printing.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

 

Constraints:
1<=N<=105
-105<=A[i], K<=105
