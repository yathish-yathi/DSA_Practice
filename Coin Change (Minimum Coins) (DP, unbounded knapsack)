https://www.geeksforgeeks.org/problems/number-of-coins1824/1

T O(sum*coins) , S O(sum)

//we have used space optimised tabular method
//create dp array and for 0th row (no coins) initilise dp[1 to sum] as sum+1 which means 
//not possible (-1), but we can form 0 with empty so dp[0]=0;
//we have not taken +infinity because it will overflow when added +1
//sum+1 will work in the place of +infinity becasue as per contraint coin*sum will not 
//cross 10^6 , even if we have single 1rs coin the number of coins will be below sum

class Solution {

    public int minCoins(int coins[], int sum) {
        // Your code goes here
        int dp[] = new int[sum+1];
        
        Arrays.fill(dp, sum+1);
        dp[0] = 0;
        
        for(int coin : coins){ // we start taking coins 
            for(int i=coin; i<=sum; i++){ // for each coin we travers from 0 to sum(target), but we start from i=coin because all previous are exclusion conditions
                dp[i] = Math.min(dp[i], 1+dp[i-coin]);
            }
        }
        
        if(dp[sum]== sum+1) return -1; //if sum index is not changes that means not possible to form sum
        
        return dp[sum];
    }
}

===========
Coin Change (Minimum Coins)
Difficulty: Medium

Given an array coins[] represent the coins of different denominations and a target value sum. You have an infinite supply of each of the valued coins{coins1, coins2, ..., coinsm}.  Find the minimum number of coins to make the change. If not possible to make a change then return -1.

Examples:

Input: coins[] = [25, 10, 5], sum = 30
Output: 2
Explanation: Minimum 2 coins needed, 25 and 5  
Input: coins[] = [9, 6, 5, 1], sum = 19
Output: 3
Explanation: 19 = 9 + 9 + 1
Input: coins[] = [5, 1], sum = 0
Output: 0
Explanation: For 0 sum, we do not need a coin
Input: coins[] = [4, 6, 2], sum = 5
Output: -1
Explanation: Not possible to make the given sum.
 
Constraints:
1 ≤ sum*coins.size() ≤ 106
All array elements are distinct
