https://leetcode.com/problems/insert-into-a-binary-search-tree/description/

//1. if root is null/empty then create new TreeNode
//2. if val<cur_root.val 
// then check if cur_root.left is null if yes create node at cur_root.left, else
//continue travering left
//3. if val>cur_root.val 
//then check if cur_root.right is null if yes create node at cur_root.right, else
//continue travering right
//ref Note : 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        
        //1. if root is null
        if(root==null){
            root = new TreeNode(val);
            return root;
        }

        insertIntoBST_helper(root, val);

        return root;
    }

    // Note : do not right code like below, here we can assign node to root which is null but there will be link to parent node, because address of this node was null previously so there was not link between parent and null child, (address is not present in node.left/right).
    // public void insertIntoBST_helper(TreeNode root, int val){
    //     if(root==null){
    //         root = new TreeNode(val);
    //         return;
    //     }

    //     ///System.out.print(", "+root.left);
    //     if(val < root.val) insertIntoBST_helper(root.left, val);
    //     else insertIntoBST_helper(root.right, val);

    // }
    
    public void insertIntoBST_helper(TreeNode root, int val){

        //2.
        if(val < root.val) {
            if(root.left==null){
                root.left = new TreeNode(val);
                return;
            }
            insertIntoBST_helper(root.left, val);
        }
        
        //3.
        else {
            if(root.right==null){
                root.right = new TreeNode(val);
                return;
            }
            insertIntoBST_helper(root.right, val);
        }
    }
}

//===========
Insert into a Binary Search Tree
Medium

You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.

Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.

 

Example 1:


Input: root = [4,2,7,1,3], val = 5
Output: [4,2,7,1,3,5]
Explanation: Another accepted tree is:

Example 2:

Input: root = [40,20,60,10,30,50,70], val = 25
Output: [40,20,60,10,30,50,70,null,null,25]
Example 3:

Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5
Output: [4,2,7,1,3,5]
 

Constraints:

The number of nodes in the tree will be in the range [0, 104].
-108 <= Node.val <= 108
All the values Node.val are unique.
-108 <= val <= 108
It's guaranteed that val does not exist in the original BST.
