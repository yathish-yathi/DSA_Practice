https://leetcode.com/problems/lru-cache/
https://www.youtube.com/watch?v=xDEuM5qa0zg
https://www.youtube.com/watch?v=Xc4sICC8m4M

class LRUCache {

    class Node{
        int value;
        int key;
        Node next;
        Node prev;

        public Node(int key, int value){
            this.value=value;
            this.key=key;
            this.next=null;
            this.prev=null;
        }
    }

    int capacity;
    Node head;
    Node tail;
    Map<Integer, Node> map;

    public LRUCache(int capacity) {
        this.capacity=capacity;
        head=new Node(0, 0);
        tail=new Node(0, 0);
        head.next=tail;
        tail.prev=head;
        map=new HashMap<>(capacity);
    }
    
    public int get(int key) {
        //if key exist in map then get node and return value, but before 
        //returning we need to make this to LRUCache , so remove the 
        //node from its place from LL and insert at front 
        if(map.containsKey(key)){
            Node node=map.get(key);
            remove(node);
            insert(node);
            return node.value;
        }
        else{
            return -1;
        }
    }
    
    public void put(int key, int value) {
        Node newnode = new Node(key, value);
        //if key is already present (value might be different so we need to update)
        //first remove old node from LL and map (since key is same .put will override)
        //them insert new node into LL
        if(map.containsKey(key)){
            remove(map.get(key));
            map.put(key, newnode);
            insert(newnode);
        }
        //if key not present , first get least recent cache from end of LL
        //then remove that cache from LL and map 
        //them insert new node into LL
        else if(map.size()==capacity){
            Node endNode=tail.prev;
            remove(endNode);
            map.remove(endNode.key);

            map.put(key, newnode);
            insert(newnode);
        }
        else{//if we have capacity left then add cache into map and LL
            map.put(key, newnode);
            insert(newnode);
        }
    }

    //removing node from its place in LL
    public void remove(Node node){
        node.prev.next = node.next;
        node.next.prev = node.prev; 
    }

    //adding node to begining which indicates this is recently used node/cache
    public void insert(Node node){
        Node temp=head.next;
        head.next=node;
        node.prev=head;
        node.next=temp;
        temp.prev=node;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */


//=====
LRU Cache
Medium

Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 

Constraints:

1 <= capacity <= 3000
0 <= key <= 104
0 <= value <= 105
At most 2 * 105 calls will be made to get and put.
