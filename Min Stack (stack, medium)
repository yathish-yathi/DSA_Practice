https://leetcode.com/problems/min-stack/
//https://www.youtube.com/watch?v=ZvaRHYYI0-4
//https://www.youtube.com/watch?v=V09NfaGf2ao

//while pushing formula to push updated value (2*cur-min) then update mininum
//while poping use formula to update min (2*min-s.peek())
//note : carfully note type conversion between int and long
class MinStack {

    Stack<Long> s;
    Long min;

    public MinStack() {
        s=new Stack<>();
        min=Long.MAX_VALUE;
    }
    
    public void push(int val) {
        Long value=Long.valueOf(val);
        if(s.isEmpty()){
            s.push(value);
            min=value;
        }else{
            if(value>=min){
                s.push(value);
            }else{
                //first update value with previous min and push, then update min (reverse in case if poping)
                s.push(2*value-min);
                min=value;
            }
        }
    }
    
    public void pop() {
        if(s.isEmpty()){
            return;
        }else{
            if(s.peek()>=min){
                s.pop();
            }else{
                //first update min with top of stack, then pop the top (reverse in case if push)
                min=2*min-s.peek();
                s.pop();
            }
        }
    }
    
    public int top() {
        if(s.isEmpty()){
            return -1;
        }else{
            if(s.peek()>=min){
                return s.peek().intValue();
            }else{
                return min.intValue();
            }
        }
    }
    
    public int getMin() {
        if(s.isEmpty()){
            return -1;
        }else{
            return min.intValue();
        }
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

-----
Min Stack

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:
MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.

 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.

