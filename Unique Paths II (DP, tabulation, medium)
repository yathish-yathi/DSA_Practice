https://leetcode.com/problems/unique-paths-ii/description/

T O(m*n), S O(m*n)

//Similar to unigue path - 1, but when encounter obstacle no path
//can pass through it so number of ways through it becomes 0.
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        int DP[][] = new int[m][n];

        //filling first col with 1 way until we hit obstecle 
        //after that remaing points should filled with 0 as we can not reach the remaining points due to obstacle in between
        boolean obstacle = false;
        for(int i=0; i<m; i++){
            if(obstacleGrid[i][0]==1) obstacle = true;

            if(!obstacle){
                DP[i][0] = 1;
            }else{
                DP[i][0] = 0;
            }
        }
        //filling first row with 1 way until we hit obstecle 
        //after that remaing points should filled with 0 as we can not reach the remaining points due to obstacle in between
        obstacle = false;
        for(int j=0; j<n; j++){
            if(obstacleGrid[0][j]==1) obstacle = true;

            if(!obstacle){
                DP[0][j] = 1;
            }else{
                DP[0][j] = 0;
            } 
        }

        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                //if there is an obstacle mark ways through it to 0.
                if(obstacleGrid[i][j]==1){
                    DP[i][j] = 0;
                    continue;
                }
                DP[i][j] = DP[i-1][j] + DP[i][j-1];
            }
        }

        return DP[m-1][n-1];
    }
}

===========
Unique Paths II
Medium

You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
Example 2:


Input: obstacleGrid = [[0,1],[0,0]]
Output: 1
 

Constraints:

m == obstacleGrid.length
n == obstacleGrid[i].length
1 <= m, n <= 100
obstacleGrid[i][j] is 0 or 1.
