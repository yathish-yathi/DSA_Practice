https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

T O(n), S O(1)

//Note : here lowest means not the node with smaller value instead it mean the node 
//which p and q meet first
//if we had to find common ansister node with low value we need to change if(right!=null) return right; to if(right!=null) return root;  


//1. Do DFS and look for node P and Q, when found return node
//2. the node where both left and right are not null that is the first common node
//3. for other than common node , simpy return whatever we got from left side or right side.
//4. if we P and Q was not found at left or right then return null, since its given that P and Q will be there is test case we wont get any error.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        return lowestCommonAncestor_helper(root, p, q);
    }

    public TreeNode lowestCommonAncestor_helper(TreeNode root, TreeNode p, TreeNode q){

        if(root==null){
            return null;
        }

        //1.
        if(root==p || root==q){
            return root;
        }

        TreeNode left = lowestCommonAncestor_helper(root.left, p, q);
        TreeNode right = lowestCommonAncestor_helper(root.right, p, q);

        //2.
        if(left!=null && right!=null){
            return root;
        }

        //3.
        if(left!=null){
            return left;
        }
        if(right!=null){
            return right;
        }

        //4.
        return null;
    }
}

//================
Lowest Common Ancestor of a Binary Search Tree
Medium

Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [2,1], p = 2, q = 1
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the BST.



